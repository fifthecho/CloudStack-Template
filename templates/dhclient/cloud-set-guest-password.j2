#!/bin/bash
#
# cloud-set-guest-password   Init file for Password Download Client
#
# chkconfig: 2345 50 02
# description: Init file for Password Download Client
#
### BEGIN INIT INFO
# Provides:          cloud-set-guest-password
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs $syslog
# Should-Start:      $syslog
# Should-Stop:       $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: CloudStack Password Download Client
# Description:       CloudStack Password Download Client
### END INIT INFO
{% if 'stat' in platform_function_library_rhel %}
  {% set platform_function_library = platform_function_library_rhel %}
  {% set function_caller = "action" %}
{% endif %}
{% if 'stat' in platform_function_library_debian %}
 {% set platform_function_library = platform_function_library_debian %}
 {% set function_caller =  "log_action_msg" %}
{% endif %}
{% if 'stat' in platform_function_library_suse %}
  {% set platform_function_library = platform_function_library_suse %}
  {% set function_caller = "echo -n" %}
{% endif %}

# Modify this line to specify the user (default is root)
user=root

# Source function library.
. {{ platform_function_library.stat.path }}

. /usr/share/cloudstack/cloudstack-common-functions

function cloud_set_guest_password() {
  sleep $[ 1 + $[ RANDOM % 10 ]]
  find_lease    
  password_received=0
  file_count=0
  error_count=0
  if [ -f $LEASE_FILE ]; then
    file_count=$((file_count+1))
    PASSWORD_SERVER_IP=$(grep dhcp-server-identifier $LEASE_FILE | uniq | tail -1 | awk '{print $NF}' | tr -d '\;')

      if [ -n $PASSWORD_SERVER_IP ]; then
        logger -t "cloud" "Found password server IP $PASSWORD_SERVER_IP in $LEASE_FILE"
        logger -t "cloud" "Sending request to password server at $PASSWORD_SERVER_IP"
        password=$(wget -q -t 3 -T 20 -O - --header "DomU_Request: send_my_password" $PASSWORD_SERVER_IP:8080)
        password=$(echo $password | tr -d '\r')

          if [ $? -eq 0 ]; then
            logger -t "cloud" "Got response from server at $PASSWORD_SERVER_IP"

            case $password in
            
            "")         logger -t "cloud" "Password server at $PASSWORD_SERVER_IP did not have any password for the VM"
                                ;;
            
            "bad_request")    logger -t "cloud" "VM sent an invalid request to password server at $PASSWORD_SERVER_IP"
                                error_count=$((error_count+1))
                                ;;
                                
            "saved_password")   logger -t "cloud" "VM has already saved a password from the password server at $PASSWORD_SERVER_IP"
                                ;;
                                
            *)          logger -t "cloud" "VM got a valid password from server at $PASSWORD_SERVER_IP"
                                password_received=1
                                ;;
                                
            esac
          else
            logger -t "cloud" "Failed to send request to password server at $PASSWORD_SERVER_IP"
            error_count=$((error_count+1))
          fi
      else
        logger -t "cloud" "Could not find password server IP in $LEASE_FILE"
        error_count=$((error_count+1))
      fi
  fi

  if [ "$password_received" == "0" ]; then
    if [ "$error_count" == "$file_count" ]; then
      logger -t "cloud" "Failed to get password from any server"
      exit 1
    else
      logger -t "cloud" "Did not need to change password."
      exit 0
    fi
  fi

  logger -t "cloud" "Changing password ..."
  echo $password | passwd --stdin $user
                          
  if [ $? -gt 0 ]; then
      logger -t "cloud" "Failed to change password for user $user"
  fi

  logger -t "cloud" "Successfully changed password for user $user"
  logger -t "cloud" "Sending acknowledgment to password server at $PASSWORD_SERVER_IP"
  wget -t 3 -T 20 -O - --header "DomU_Request: saved_password" $PASSWORD_SERVER_IP:8080
}

# See how we were called.
case "$1" in
  start)
    {{ function_caller }} $"Starting cloud-set-guest-password: " /bin/true
    cloud_set_guest_password
    RETVAL=$?
    ;;
  stop)
    {{ function_caller }} $"Shutting down cloud-set-guest-password: " /bin/true
    RETVAL=$?
    ;;
  restart)
    $0 stop
    $0 start
    ;;
  *) 
    echo $"Usage: cloud-set-guest-password {start}"
    RETVAL=2
    ;;
esac

exit $RETVAL
